0.5*ln(0.5)
0.5*log(0.5)
-0.5*log(0.5)
setwd("~/Work/Cytokine-networks/Src")
library(readr)
library(data.table)
library(foreach)
si <- 2
curr1 <- ''
curr2 <- ''
# load the expression and xcell for this sample
filepath = './'
load(paste0(filepath, 'Expr/sample_',si ,'.rda')) # expr
load(paste0(filepath, 'cell-cell-scaffold-narrow-march11.rda'))  ## ccs: cell to cell scaffold
load(paste0(filepath, 'accessories.rda'))  ## ccs: cell to cell scaffold
setwd("~/Work/Cytokine-networks/testEnv")
filepath = './'
load(paste0(filepath, 'Expr/sample_',si ,'.rda')) # expr
load(paste0(filepath, 'cell-cell-scaffold-narrow-march11.rda'))  ## ccs: cell to cell scaffold
load(paste0(filepath, 'accessories.rda'))  ## ccs: cell to cell scaffold
load(paste0(filepath, 'Expr/sample_',si ,'.rda')) # expr
View(ebpp1)
# weighted graphs for each sample #
library(hash)
geneIdx <- hash()
for (i in 1:nrow(ebpp1)) {geneIdx[[ as.character(ebpp1$GeneID[i]) ]] <- i }
geneIdx[['CCR5']]
ebpp1$GeneID[718]
save(cellECDFS, geneIdx, allCells, edgeGenes, file='accessories.rda')
load('Prob/prob_pDC_1.rda')
p1 <-
x
c1 <- 'pDC'
load('Prob/prob_Tregs_3.rda')
p2 <- x
c2 <- 'Tregs'
c1 <- 'pDC'   # cell 1
c2 <- 'Tregs' # cell 2
li <- 'CCL2'  # as.character(ccs[ei, 2]) # ligand
re <- 'CCR5'  # as.character(ccs[ei, 3]) # receptor
c1val <- xcell1[xcell1$X1==c1, 2]
c2val <- xcell1[xcell1$X1==c2, 2]
lival <- ebpp1[geneIdx[[li]], 2]
reval <- ebpp1[geneIdx[[re]]], 2]
reval <- ebpp1[geneIdx[[re]], 2]
lival
bin1 <- cellBin1[[c1]] # look up bin here
bin2 <- cellBin1[[c2]] # look up bin here
p_l1 <- p1[[li]](lival)
p_c1 <- cellECDFS[[c1]](c1val)
p_r2 <- p2[[re]](reval)
p_c2 <- cellECDFS[[c2]](c2val)
p_l1*p_c1*p_r2*p_c2
cellIdx <- hash()
for (i in 1:nrow(xcell1)) {geneIdx[[ as.character(xcell1$X1[i]) ]] <- i }
cellIdx
for (i in 1:nrow(xcell1)) {cellIdx[[ as.character(xcell1$X1[i]) ]] <- i }
cellIdx <- hash()
for (i in 1:nrow(xcell1)) {cellIdx[[ as.character(xcell1$X1[i]) ]] <- i }
cellIdx
geneIdx <- hash()
for (i in 1:nrow(ebpp1)) {geneIdx[[ as.character(ebpp1$GeneID[i]) ]] <- i }
save(cellECDFS, geneIdx, allCells, edgeGenes, cellIdx, file='accessories.rda')
c1val <- xcell1[cellIdx[[c1]], 2]
c2val <- xcell1[cellIdx[[c2]], 2]
c1val <- xcell1[cellIdx[[c1]], 2]
c2val <- xcell1[cellIdx[[c2]], 2]
lival <- ebpp1[geneIdx[[li]], 2]
reval <- ebpp1[geneIdx[[re]], 2]
bin1 <- cellBin1[[c1]] # look up bin here
bin2 <- cellBin1[[c2]] # look up bin here
allCells
ccsdt <- data.table(ccs)
class(ccsdt)
head(ccsdt)
ci <- 'aDC'
cj <- 'cDC'
x <- subset(ccsdt, cellL == ci & cellR == cj)
x
newTable <- rbind(newTable, x)
newTable <- data.table()
newTable <- rbind(newTable, x)
class(newTable)
head(newTable)
newTable <- data.table()
for (ci in allCells) {
for (cj in allCells) {
x <- subset(ccsdt, cellL == ci & cellR == cj)
newTable <- rbind(newTable, x)
}
}
dim(newTable)
dim(ccs)
allCells
ccs[ccs$cellL == 'astrocytes',]
cellList <- unique(c(unique(ccs$cellL), unique(ccs$cellR)))
cellList
cellList <- unique(c(unique(as.character(ccs$cellL)), unique(as.character(ccs$cellR))))
cellList
cellList <- cellList[1:64]
all(cellList %in% allCells)
all(allCells %in% cellList)
dim(ccs)
dim(newTable)
ccsna <- na.omit(ccs)
dim(ccsna)
ccs <- newTable
save(ccs, file='cell-cell-scaffold-narrow-march21.rda')
rm(list=ls())
names(p1)
filepath = './'  # /titan/cancerregulome9/workspaces/users/dgibbs/CytokineNetworkData/
load(paste0(filepath, 'Expr/sample_',si ,'.rda')) # expr
load(paste0(filepath, 'cell-cell-scaffold-narrow-march21.rda'))  ## ccs: cell to cell scaffold
load(paste0(filepath, 'accessories.rda'))  ## ccs: cell to cell scaffold
load('Prob/prob_pDC_1.rda')
names(x)
all(names(x) == ebpp1)
load('Expr/sample_2.rda')
all(names(x) == ebpp1$GeneID)
p1 <- x
load('Prob/prob_Tregs_3.rda')
all(names(x) == names(p1))
pIdx <- hash()
for (i in 1:length(p1)) {pIdx[[ names(p1) ]] <- i}
pIdx <- hash()
for (i in 1:length(p1)) {pIdx[[ names(p1)[i] ]] <- i}
pIdx
save(geneIdx, cellIdx, pIdx, allCells, edgeGenes, cellECDFS, file='accessories_march21.rda')
load('../Data/ebpp.rda')
dim(ebpp)
sample(x = 1:10, size = 100)
sample(x = 1:10, size = 100, replace = T)
for (i in 1:10) {print(i)}
?foreach
